body {
  /* text align property must be set inside the parent container, this works on inline Block elements or full line elements   */
  margin: 0;
  text-align: center;
  font-family: "Merriweather", serif;
  /* If you really want to make sure that everyone sees the same font use font imbeding(Google Fonts has some ) pick them and then ad the link in index html file  */
}
h1 {
  /* use a % to make it responses to a user resizing.  here 562.5 % is = 90 pixles, would be better tu use em  */
  /*  em means the phonetic pronunciation of the letter M , is the  size the width of captial letter M   */
  /*  16 px = 100% = 1em, 90px =5.62 em  */
  /* em and % are responsive  and the values are inherited , added from parent to child .  px are static so are not cummulative  */
  /* rem is better it is the root M  will not act to accumulate from its parents  rem is the best to use  */
  font-size: 5.62rem;
  margin: 50px auto 0 auto;
  /* width: 10%;
  /* a block element with width set will need to use the margin to center */
  /* margin: 0 auto; */
  font-family: "Sacramento", cursive;
  color: #66bfbf;
}
h2 {
  font-family: "Montserrat", sans-serif;
  font-size: 2.5rem;
  color: #66bfbf;
}
h3 {
  font-family: "Montserrat", sans-serif;
  color: #11999e;
}
div {
  background-color: #e4f9f5;
}
a {
  color: #11999e;
}
span {
}
/* css box model div will expand to the height and width and pushes other content out of the way 
a % of the viewport of screen size 
can also specifiy a border or not 
defalut if 3px and will not encroch over the space it surronds 
so it acctualy adds to the width and height
Padding adds space between text and inner edge of the boarder of the box
 it also adds to size of box
the margin is a buffer zone that adds space to the outside edge of the boarder 
this is shown in the inspector tools  

*/
.top-container {
  background-color: #e4f9f5;
  /* doing this so that the cloud can be set absolute relative to this container  */
  position: relative;
  padding-top: 100px;
}
.middle-container {
}

.bottom-container {
  /* Very cool css box model demoo http://markusvogl.com/web1/interactive_box_model/css_box_demo.html */
  /* css positioning web site http://www.brainjar.com/css/positioning/default.asp */
  /* Position can be Static , Relative, Absolute or Fixed  */
  /* Static  all HTML elements are static by default- they go along with html flow and standard rules 
Relative position the seletected element relative to how it would have been positioned  as if it were static 
  according to coordinates top, bottom,left, right.  When moving elements using relative it dosent effect the position of anything else on the screen.   the coordinates act more like padding in that adding pixals on the left pushes it to the right. 

Absolute
Fixed 
*/
}
.pro {
  text-decoration-line: underline;
  font-weight: normal;
}

.top-cloud {
  /* absolute relative to the top-container */
  position: absolute;
  right: 300px;

  top: 50px;
}
.bottom-cloud {
  position: absolute;
  left: 300ps;
  /* from the bottom of the "top-conatiner" */
  bottom: 300px;
}
/*  changing the text font will affect the position of the elements  */
.react {
  /* height: 200px;
  width: 200px; */
  width: 25%;
  float: left;
  margin-right: 30px;
}
.fullstack {
  /* height: 200px;
  width: 260px; */
  width: 25;
  background-color: #e4f9f5;
  border-radius: 100%;
  float: right;
  margin-left: 30px;
}
.skill-row {
  width: 50%;
  margin: 100px auto 100px auto;
  text-align: left;
  line-height: 2;
}

/* it is better to use the float property to wrap or not text around an image.  User blocks, margins ect to postiion elements on a page */
